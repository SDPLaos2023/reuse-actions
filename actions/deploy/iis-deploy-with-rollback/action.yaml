name: "Deploy to IIS with Rollback"
description: "Deploy application to IIS using robocopy with automatic rollback on failure"

inputs:
  exclude_files:
    description: "Files to exclude from deployment (space separated)"
    required: false
    default: "appsettings.Development.json appsettings.json web.config"
  app_pool:
    description: "IIS Application Pool name"
    required: true
  deploy_path:
    description: "IIS deployment path"
    required: true
  source_path:
    description: "Source path for deployment"
    required: true

runs:
  using: "composite"
  steps:
    - name: Deploy with rollback support
      shell: powershell
      env:
        EXCLUDE_FILES: ${{ inputs.exclude_files }}
        APP_POOL: ${{ inputs.app_pool }}
        DEPLOY_PATH: ${{ inputs.deploy_path }}
        SOURCE_PATH: ${{ inputs.source_path }}
      run: |
        $AppPool = $env:APP_POOL
        $DeployPath = $env:DEPLOY_PATH
        $SourcePath = $env:SOURCE_PATH

        Write-Host "`n========================================" -ForegroundColor Cyan
        Write-Host "IIS Deployment with Rollback" -ForegroundColor Cyan
        Write-Host "========================================" -ForegroundColor Cyan
        Write-Host "App Pool: $AppPool" -ForegroundColor Gray
        Write-Host "Source: $SourcePath" -ForegroundColor Gray
        Write-Host "Destination: $DeployPath" -ForegroundColor Gray

        # Find backup path automatically from deploy path
        $projectNameOriginal = Split-Path -Path $DeployPath -Leaf
        $projectName = $projectNameOriginal -replace ' ', '_'
        $BackupDir = "C:/BackupDeployment/$projectName"

        Write-Host "`nLooking for backup in: $BackupDir" -ForegroundColor Gray

        # Get latest backup by file modification time
        $BackupZip = $null
        if (Test-Path $BackupDir) {
            $allBackups = Get-ChildItem -Path $BackupDir -Filter "Backup-*.zip" -ErrorAction SilentlyContinue
            
            if ($allBackups) {
                # Sort by LastWriteTime (newest first) and take the first one
                $latestBackup = $allBackups | Sort-Object LastWriteTime -Descending | Select-Object -First 1
                $BackupZip = $latestBackup.FullName
                
                Write-Host "✓ Found $($allBackups.Count) backup(s)" -ForegroundColor Green
                Write-Host "✓ Latest backup: $($latestBackup.Name)" -ForegroundColor Green
                Write-Host "  Created: $($latestBackup.LastWriteTime.ToString('yyyy-MM-dd HH:mm:ss'))" -ForegroundColor Gray
                Write-Host "  Size: $([math]::Round($latestBackup.Length / 1MB, 2)) MB" -ForegroundColor Gray
            } else {
                Write-Host "⚠ No backup files found (first-time deployment)" -ForegroundColor Yellow
            }
        } else {
            Write-Host "⚠ No backup directory found (first-time deployment)" -ForegroundColor Yellow
        }

        # Stop App Pool
        Write-Host "`nStopping App Pool: $AppPool..." -ForegroundColor Yellow
        Try {
            Stop-WebAppPool -Name $AppPool -ErrorAction Stop
            Start-Sleep -Seconds 5
            Write-Host "✓ App Pool stopped" -ForegroundColor Green
        } Catch {
            Write-Warning "App Pool could not be stopped or already stopped."
        }

        # Prepare robocopy exclude files
        $excludeFiles = @()
        if ($env:EXCLUDE_FILES) {
            $excludeFiles = $env:EXCLUDE_FILES -split ' '
        }

        $robocopyArgs = @($SourcePath, $DeployPath, "/E", "/XO")
        if ($excludeFiles.Count -gt 0) {
            $robocopyArgs += "/XF"
            $robocopyArgs += $excludeFiles
        }

        $logFile = Join-Path $env:TEMP "robocopy_deploy_$(Get-Date -Format 'yyyyMMdd_HHmmss').log"
        $robocopyArgs += "/LOG:$logFile", "/TEE", "/NP"

        $deploymentFailed = $false
        Try {
            Write-Host "`n========================================" -ForegroundColor Cyan
            Write-Host "Starting deployment..." -ForegroundColor Cyan
            Write-Host "Excluded files: $($excludeFiles -join ', ')" -ForegroundColor Yellow
            Write-Host "Log file: $logFile" -ForegroundColor Gray
            Write-Host "========================================" -ForegroundColor Cyan
            
            robocopy @robocopyArgs
            $rc = $env:LASTEXITCODE
            
            Write-Host "`nRobocopy exit code: $rc" -ForegroundColor $(if ($rc -le 7) { "Green" } else { "Red" })
            
            if ($rc -le 7) {
                $exitCodeMeaning = switch ($rc) {
                    0 { "No files copied (no changes)" }
                    1 { "Files copied successfully" }
                    2 { "Extra files/directories detected" }
                    3 { "Files copied, extra files present" }
                    4 { "Mismatched files/directories" }
                    5 { "Files copied, some mismatched" }
                    6 { "Extra and mismatched files" }
                    7 { "Files copied, mismatches and extras present" }
                    default { "Success" }
                }
                Write-Host "✓ Status: SUCCESS - $exitCodeMeaning" -ForegroundColor Green
            } else {
                $deploymentFailed = $true
                Write-Host "✗ Status: FAILED - Robocopy encountered errors (code $rc > 7)" -ForegroundColor Red
                
                if (Test-Path $logFile) {
                    Write-Host "`nLast 20 lines of log:" -ForegroundColor Yellow
                    Get-Content $logFile -Tail 20 | ForEach-Object { Write-Host $_ -ForegroundColor Gray }
                }
            }
            Write-Host "========================================`n" -ForegroundColor Cyan
            
        } Finally {
            # Rollback if deployment failed
            if ($deploymentFailed) {
                Write-Host "========================================" -ForegroundColor Red
                Write-Host "DEPLOYMENT FAILED - Starting Rollback..." -ForegroundColor Red
                Write-Host "========================================" -ForegroundColor Red
                
                if ($BackupZip -and (Test-Path -LiteralPath $BackupZip)) {
                    Try {
                        Write-Host "Restoring from backup: $BackupZip" -ForegroundColor Yellow
                        
                        # Extract to temp
                        $tempRestorePath = "$env:TEMP\RestoreBackup_$(Get-Date -Format 'yyyyMMdd_HHmmss')"
                        Write-Host "Extracting backup..." -ForegroundColor Yellow
                        Expand-Archive -LiteralPath $BackupZip -DestinationPath $tempRestorePath -Force -ErrorAction Stop
                        
                        # Find extracted folder (will be Backup-timestamp inside)
                        $extractedFolder = Get-ChildItem -Path $tempRestorePath -Directory | Select-Object -First 1
                        if (-not $extractedFolder) {
                            throw "Could not find extracted backup folder in temp"
                        }
                        
                        Write-Host "Found backup folder: $($extractedFolder.Name)" -ForegroundColor Gray
                        
                        # Clear deployment folder
                        if (Test-Path $DeployPath) {
                            Write-Host "Clearing deployment folder..." -ForegroundColor Yellow
                            Remove-Item -Path "$DeployPath\*" -Recurse -Force -ErrorAction Stop
                        }
                        
                        # Restore from extracted folder
                        Write-Host "Restoring files..." -ForegroundColor Yellow
                        $rollbackArgs = @(
                            $extractedFolder.FullName, $DeployPath,
                            "/MIR", "/R:3", "/W:5", "/NFL", "/NDL", "/NP"
                        )
                        robocopy @rollbackArgs
                        $rollbackRc = $env:LASTEXITCODE
                        
                        # Cleanup temp
                        if (Test-Path $tempRestorePath) {
                            Remove-Item -Path $tempRestorePath -Recurse -Force -ErrorAction SilentlyContinue
                        }
                        
                        if ($rollbackRc -le 7) {
                            Write-Host "✓ Rollback completed successfully!" -ForegroundColor Green
                            Write-Host "Application restored to previous version." -ForegroundColor Green
                        } else {
                            throw "Robocopy rollback failed with exit code: $rollbackRc"
                        }
                    } Catch {
                        Write-Error "✗ Rollback failed: $_"
                        Write-Error "Manual intervention required!"
                        Write-Error "Backup location: $BackupZip"
                    }
                } else {
                    Write-Warning "No backup available for rollback."
                    Write-Warning "Manual intervention required."
                }
                Write-Host "========================================`n" -ForegroundColor Red
            }

            # Always restart App Pool
            Write-Host "Starting App Pool: $AppPool..." -ForegroundColor Cyan
            Try {
                Start-WebAppPool -Name $AppPool -ErrorAction Stop
                Write-Host "✓ App Pool '$AppPool' started successfully" -ForegroundColor Green
            } Catch {
                Write-Error "✗ App Pool '$AppPool' could not be started: $_"
                Write-Warning "Please check IIS Manager manually!"
            }

            # Exit with appropriate code
            if ($deploymentFailed) {
                Write-Host "`n========================================" -ForegroundColor Red
                Write-Error "Deployment failed with robocopy exit code $rc"
                Write-Host "Log file: $logFile" -ForegroundColor Yellow
                Write-Host "========================================`n" -ForegroundColor Red
                exit $rc
            } else {
                Write-Host "`n========================================" -ForegroundColor Green
                Write-Host "Deployment completed successfully!" -ForegroundColor Green
                Write-Host "========================================`n" -ForegroundColor Green
                exit 0
            }
        }
