name: "Deploy to IIS"
description: "Deploy application to IIS using robocopy"

inputs:
  exclude_files:
    description: "Files to exclude from deployment (space separated)"
    required: false
    default: "appsettings.Development.json appsettings.json web.config"
  app_pool:
    description: "IIS Application Pool name"
    required: false
    default: "DCC-test"
  deploy_path:
    description: "IIS deployment path"
    required: false
    default: 'C:\inetpub\wwwroot\Dcc-Dev'
  source_path:
    description: "Source path for deployment"
    required: false
    default: 'Doccontrol\publish'

runs:
  using: "composite"
  steps:
    - name: Backup existing deployment
      shell: powershell
      env:
        DEPLOY_PATH: ${{ inputs.deploy_path }}
        APP_POOL: ${{ inputs.app_pool }}
      run: |
        $DeployPath = $env:DEPLOY_PATH
        $AppPool = $env:APP_POOL
        $timestamp = Get-Date -Format 'yyyyMMdd_HHmmss'

        # Extract project name from deploy path (e.g., "Dcc-Dev" from "C:\inetpub\wwwroot\Dcc-Dev")
        $projectName = Split-Path -Path $DeployPath -Leaf

        $BackupDir = "C:/BackupDeployment/$projectName"
        $BackupZip = "$BackupDir/Backup-$timestamp.zip"

        # Create backup directory if not exists
        if (-not (Test-Path $BackupDir)) {
            New-Item -Path $BackupDir -ItemType Directory -Force | Out-Null
        }

        Write-Host "========================================" -ForegroundColor Cyan
        Write-Host "Preparing backup of existing deployment..." -ForegroundColor Cyan

        if (Test-Path $DeployPath) {
            # Stop App Pool before backup
            Write-Host "Stopping App Pool: $AppPool" -ForegroundColor Yellow
            Try {
                Stop-WebAppPool -Name $AppPool -ErrorAction Stop
                Start-Sleep -Seconds 5
                Write-Host "App Pool stopped successfully." -ForegroundColor Green
            } Catch {
                Write-Warning "App Pool $AppPool could not be stopped or already stopped."
            }
            
            Try {
                # Compress deployment to zip
                Write-Host "Creating backup..." -ForegroundColor Yellow
                Compress-Archive -Path "$DeployPath\*" -DestinationPath $BackupZip -Force -ErrorAction Stop
                Write-Host "Backup created successfully: $BackupZip" -ForegroundColor Green
                
                # Verify backup file exists and is not empty
                if (-not (Test-Path $BackupZip) -or (Get-Item $BackupZip).Length -eq 0) {
                    throw "Backup file is invalid or empty"
                }
                
                # Store backup path for later use
                echo "BACKUP_ZIP_PATH=$BackupZip" >> $env:GITHUB_ENV
                
                # Clean old backups for this project (keep last 5)
                $oldBackups = Get-ChildItem -Path $BackupDir -Filter "Backup-*.zip" | 
                              Sort-Object LastWriteTime -Descending | 
                              Select-Object -Skip 5
                if ($oldBackups) {
                    Write-Host "Cleaning up old backups for $projectName (keeping last 5)..." -ForegroundColor Yellow
                    $oldBackups | ForEach-Object {
                        Remove-Item $_.FullName -Force
                        Write-Host "  Removed: $($_.Name)" -ForegroundColor Gray
                    }
                }
            } Catch {
                Write-Host "========================================" -ForegroundColor Red
                Write-Error "CRITICAL: Failed to create backup: $_"
                Write-Error "Deployment ABORTED for safety - cannot proceed without valid backup."
                
                # Start App Pool back before exiting
                Write-Host "Starting App Pool back: $AppPool" -ForegroundColor Yellow
                Try {
                    Start-WebAppPool -Name $AppPool -ErrorAction Stop
                    Write-Host "App Pool '$AppPool' started successfully." -ForegroundColor Green
                } Catch {
                    Write-Error "Failed to start App Pool '$AppPool': $_"
                    Write-Error "Please check IIS Manager manually."
                }
                
                Write-Host "========================================" -ForegroundColor Red
                exit 1
            }
        } else {
            Write-Host "No existing deployment found at $DeployPath. Skipping backup." -ForegroundColor Yellow
            Write-Host "This appears to be a first-time deployment." -ForegroundColor Yellow
        }
        Write-Host "========================================`n" -ForegroundColor Cyan
    - name: Execute IIS deployment
      shell: powershell
      env:
        EXCLUDE_FILES: ${{ inputs.exclude_files }}
        APP_POOL: ${{ inputs.app_pool }}
        DEPLOY_PATH: ${{ inputs.deploy_path }}
        SOURCE_PATH: ${{ inputs.source_path }}
      run: |
        $AppPool = $env:APP_POOL
        $DeployPath = $env:DEPLOY_PATH
        $SourcePath = $env:SOURCE_PATH

        # Prepare robocopy exclude
        $excludeFiles = @()
        if ($env:EXCLUDE_FILES) {
            $excludeFiles = $env:EXCLUDE_FILES -split ' '
        }

        # Use /E instead of /MIR to preserve files/folders in destination that don't exist in source
        # /E = Copy subdirectories, including empty ones
        # /XO = Exclude older files (don't overwrite newer files in destination)
        $robocopyArgs = @($SourcePath, $DeployPath, "/E", "/XO")
        if ($excludeFiles.Count -gt 0) {
            $robocopyArgs += "/XF"
            $robocopyArgs += $excludeFiles
        }

        # Add logging for robocopy operations
        $logFile = Join-Path $env:TEMP "robocopy_$(Get-Date -Format 'yyyyMMdd_HHmmss').log"
        $robocopyArgs += "/LOG:$logFile"
        $robocopyArgs += "/TEE"
        $robocopyArgs += "/NP"

        $deploymentFailed = $false
        Try {
            Write-Host "========================================" -ForegroundColor Cyan
            Write-Host "Starting robocopy deployment..." -ForegroundColor Cyan
            Write-Host "Source: $SourcePath" -ForegroundColor Yellow
            Write-Host "Destination: $DeployPath" -ForegroundColor Yellow
            Write-Host "Excluded files: $($excludeFiles -join ', ')" -ForegroundColor Yellow
            Write-Host "Log file: $logFile" -ForegroundColor Yellow
            Write-Host "========================================" -ForegroundColor Cyan
            
            robocopy @robocopyArgs
            $rc = $env:LASTEXITCODE
            
            Write-Host "`n========================================" -ForegroundColor Cyan
            Write-Host "Robocopy exit code: $rc" -ForegroundColor $(if ($rc -le 7) { "Green" } else { "Red" })
            
            if ($rc -le 7) {
                $exitCodeMeaning = switch ($rc) {
                    0 { "No files were copied. No failure was encountered. No files were mismatched." }
                    1 { "All files were copied successfully." }
                    2 { "There are some additional files in the destination directory that are not present in the source." }
                    3 { "Some files were copied. Additional files were present." }
                    4 { "Some Mismatched files or directories were detected." }
                    5 { "Some files were copied. Some files were mismatched." }
                    6 { "Additional files and mismatched files exist." }
                    7 { "Files were copied, a file mismatch was present, and additional files were present." }
                    default { "Success" }
                }
                Write-Host "Status: SUCCESS - $exitCodeMeaning" -ForegroundColor Green
            } else {
                $deploymentFailed = $true
                Write-Host "Status: FAILED - Robocopy encountered errors (code $rc > 7)" -ForegroundColor Red
                Write-Host "`nLast 20 lines of log file:" -ForegroundColor Yellow
                if (Test-Path $logFile) {
                    Get-Content $logFile -Tail 20 | ForEach-Object { Write-Host $_ -ForegroundColor Gray }
                }
            }
            Write-Host "========================================`n" -ForegroundColor Cyan
        } Finally {
            # If deployment failed, attempt rollback
            if ($deploymentFailed) {
                Write-Host "`n========================================" -ForegroundColor Red
                Write-Host "DEPLOYMENT FAILED - Starting Rollback..." -ForegroundColor Red
                Write-Host "========================================" -ForegroundColor Red
                
                $backupZipPath = $env:BACKUP_ZIP_PATH
                if ($backupZipPath -and (Test-Path $backupZipPath)) {
                    Try {
                        Write-Host "Restoring from backup: $backupZipPath" -ForegroundColor Yellow
                        
                        # Delete everything in deployment folder
                        if (Test-Path $DeployPath) {
                            Write-Host "Clearing deployment folder..." -ForegroundColor Yellow
                            Remove-Item -Path "$DeployPath\*" -Recurse -Force -ErrorAction Stop
                        }
                        
                        # Extract backup to restore previous version completely
                        Write-Host "Extracting backup files..." -ForegroundColor Yellow
                        Expand-Archive -Path $backupZipPath -DestinationPath $DeployPath -Force -ErrorAction Stop
                        
                        Write-Host "Rollback completed successfully!" -ForegroundColor Green
                        Write-Host "Application restored to previous version (100% from backup)." -ForegroundColor Green
                    } Catch {
                        Write-Error "Rollback failed: $_"
                        Write-Error "Manual intervention required. Backup location: $backupZipPath"
                    }
                } else {
                    Write-Warning "No backup available for rollback."
                    Write-Warning "Manual intervention required."
                }
                Write-Host "========================================`n" -ForegroundColor Red
            }
            
            # Always try to start the app pool
            Write-Host "Attempting to start App Pool: $AppPool" -ForegroundColor Cyan
            Try {
                Start-WebAppPool -Name $AppPool -ErrorAction Stop
                Write-Host "App Pool '$AppPool' started successfully." -ForegroundColor Green
            } Catch {
                Write-Warning "App Pool '$AppPool' could not be started: $_"
                Write-Warning "Please check IIS Manager manually."
            }
            
            if ($deploymentFailed) {
                Write-Error "Deployment failed with robocopy exit code $rc. See log: $logFile"
                exit $rc
            } else {
                Write-Host "Deployment completed successfully" -ForegroundColor Green
                exit 0
            }
        }
