name: "Deploy to IIS"
description: "Deploy application to IIS using robocopy"

inputs:
  exclude_files:
    description: "Files to exclude from deployment (space separated)"
    required: false
    default: "appsettings.Development.json appsettings.json web.config"
  app_pool:
    description: "IIS Application Pool name"
    required: false
    default: "DCC-test"
  deploy_path:
    description: "IIS deployment path"
    required: false
    default: 'C:\inetpub\wwwroot\Dcc-Dev'
  source_path:
    description: "Source path for deployment"
    required: false
    default: 'Doccontrol\publish'

runs:
  using: "composite"
  steps:
    - name: Backup existing deployment
      shell: powershell
      env:
        DEPLOY_PATH: ${{ inputs.deploy_path }}
      run: |
        $DeployPath = $env:DEPLOY_PATH
        $timestamp = Get-Date -Format 'yyyyMMdd_HHmmss'

        # Extract project name from deploy path and replace spaces with underscores
        $projectName = Split-Path -Path $DeployPath -Leaf
        $projectName = $projectName -replace ' ', '_'

        $BackupDir = "C:/BackupDeployment/$projectName"
        $BackupPath = "$BackupDir/Backup-$timestamp"

        # Create backup directory if not exists
        if (-not (Test-Path $BackupDir)) {
            New-Item -Path $BackupDir -ItemType Directory -Force | Out-Null
        }

        Write-Host "========================================" -ForegroundColor Cyan
        Write-Host "Creating backup of existing deployment..." -ForegroundColor Cyan

        if (Test-Path $DeployPath) {
            Try {
                # Use Robocopy with VSS support to backup without stopping app pool
                # /MIR = Mirror (copy all, delete what doesn't exist in source)
                # /B = Backup mode (bypass file locks using VSS)
                # /R:3 = Retry 3 times on failure
                # /W:5 = Wait 5 seconds between retries
                # /NFL /NDL = No file/directory list in output (reduce log size)
                Write-Host "Step 1: Using Robocopy to backup (with VSS support - no downtime)..." -ForegroundColor Yellow
                $robocopyArgs = @($DeployPath, $BackupPath, "/MIR", "/B", "/R:3", "/W:5", "/NFL", "/NDL", "/NP")
                
                robocopy @robocopyArgs
                $rc = $LASTEXITCODE
                
                # Robocopy exit codes: 0-7 = success, 8+ = error
                if ($rc -le 7) {
                    Write-Host "Backup folder created successfully: $BackupPath" -ForegroundColor Green
                    
                    # Step 2: Compress backup to save space
                    Write-Host "Step 2: Compressing backup to save space..." -ForegroundColor Yellow
                    $BackupZip = "$BackupPath.zip"
                    Compress-Archive -Path "$BackupPath\*" -DestinationPath $BackupZip -Force -ErrorAction Stop
                    
                    # Verify zip file
                    if (Test-Path $BackupZip) {
                        $zipSize = (Get-Item $BackupZip).Length / 1MB
                        Write-Host "Backup compressed successfully: $BackupZip" -ForegroundColor Green
                        Write-Host "Compressed size: $([math]::Round($zipSize, 2)) MB" -ForegroundColor Cyan
                        
                        # Remove uncompressed backup folder to save space
                        Remove-Item -Path $BackupPath -Recurse -Force -ErrorAction Stop
                        Write-Host "Uncompressed backup removed to save space" -ForegroundColor Gray
                        
                        # Store backup zip path for later use (with quotes for paths with spaces)
                        Add-Content -Path $env:GITHUB_ENV -Value "BACKUP_ZIP_PATH=$BackupZip"
                    } else {
                        throw "Failed to create zip file"
                    }
                    
                    # Clean old backups for this project (keep last 5)
                    $oldBackups = Get-ChildItem -Path $BackupDir -Filter "Backup-*.zip" | 
                                  Sort-Object LastWriteTime -Descending | 
                                  Select-Object -Skip 5
                    if ($oldBackups) {
                        Write-Host "Cleaning up old backups for $projectName (keeping last 5)..." -ForegroundColor Yellow
                        $oldBackups | ForEach-Object {
                            Remove-Item $_.FullName -Force
                            Write-Host "  Removed: $($_.Name)" -ForegroundColor Gray
                        }
                    }
                } else {
                    throw "Robocopy failed with exit code: $rc"
                }
            } Catch {
                Write-Host "========================================" -ForegroundColor Red
                Write-Error "CRITICAL: Failed to create backup: $_"
                Write-Error "Deployment ABORTED for safety - cannot proceed without valid backup."
                Write-Host "========================================" -ForegroundColor Red
                exit 1
            }
        } else {
            Write-Host "No existing deployment found at $DeployPath. Skipping backup." -ForegroundColor Yellow
            Write-Host "This appears to be a first-time deployment." -ForegroundColor Yellow
        }
        Write-Host "========================================`n" -ForegroundColor Cyan
    - name: Execute IIS deployment
      shell: powershell
      env:
        EXCLUDE_FILES: ${{ inputs.exclude_files }}
        APP_POOL: ${{ inputs.app_pool }}
        DEPLOY_PATH: ${{ inputs.deploy_path }}
        SOURCE_PATH: ${{ inputs.source_path }}
      run: |
        $AppPool = $env:APP_POOL
        $DeployPath = $env:DEPLOY_PATH
        $SourcePath = $env:SOURCE_PATH

        # Stop App Pool before deployment
        Write-Host "Stopping App Pool: $AppPool" -ForegroundColor Yellow
        Try {
            Stop-WebAppPool -Name $AppPool -ErrorAction Stop
            Start-Sleep -Seconds 5
            Write-Host "App Pool stopped successfully." -ForegroundColor Green
        } Catch {
            Write-Warning "App Pool $AppPool could not be stopped or already stopped."
        }

        # Prepare robocopy exclude
        $excludeFiles = @()
        if ($env:EXCLUDE_FILES) {
            $excludeFiles = $env:EXCLUDE_FILES -split ' '
        }

        # Use /E instead of /MIR to preserve files/folders in destination that don't exist in source
        # /E = Copy subdirectories, including empty ones
        # /XO = Exclude older files (don't overwrite newer files in destination)
        $robocopyArgs = @($SourcePath, $DeployPath, "/E", "/XO")
        if ($excludeFiles.Count -gt 0) {
            $robocopyArgs += "/XF"
            $robocopyArgs += $excludeFiles
        }

        # Add logging for robocopy operations
        $logFile = Join-Path $env:TEMP "robocopy_$(Get-Date -Format 'yyyyMMdd_HHmmss').log"
        $robocopyArgs += "/LOG:$logFile"
        $robocopyArgs += "/TEE"
        $robocopyArgs += "/NP"

        $deploymentFailed = $false
        Try {
            Write-Host "========================================" -ForegroundColor Cyan
            Write-Host "Starting robocopy deployment..." -ForegroundColor Cyan
            Write-Host "Source: $SourcePath" -ForegroundColor Yellow
            Write-Host "Destination: $DeployPath" -ForegroundColor Yellow
            Write-Host "Excluded files: $($excludeFiles -join ', ')" -ForegroundColor Yellow
            Write-Host "Log file: $logFile" -ForegroundColor Yellow
            Write-Host "========================================" -ForegroundColor Cyan
            
            robocopy @robocopyArgs
            $rc = $env:LASTEXITCODE
            
            Write-Host "`n========================================" -ForegroundColor Cyan
            Write-Host "Robocopy exit code: $rc" -ForegroundColor $(if ($rc -le 7) { "Green" } else { "Red" })
            
            if ($rc -le 7) {
                $exitCodeMeaning = switch ($rc) {
                    0 { "No files were copied. No failure was encountered. No files were mismatched." }
                    1 { "All files were copied successfully." }
                    2 { "There are some additional files in the destination directory that are not present in the source." }
                    3 { "Some files were copied. Additional files were present." }
                    4 { "Some Mismatched files or directories were detected." }
                    5 { "Some files were copied. Some files were mismatched." }
                    6 { "Additional files and mismatched files exist." }
                    7 { "Files were copied, a file mismatch was present, and additional files were present." }
                    default { "Success" }
                }
                Write-Host "Status: SUCCESS - $exitCodeMeaning" -ForegroundColor Green
            } else {
                $deploymentFailed = $true
                Write-Host "Status: FAILED - Robocopy encountered errors (code $rc > 7)" -ForegroundColor Red
                Write-Host "`nLast 20 lines of log file:" -ForegroundColor Yellow
                if (Test-Path $logFile) {
                    Get-Content $logFile -Tail 20 | ForEach-Object { Write-Host $_ -ForegroundColor Gray }
                }
            }
            Write-Host "========================================`n" -ForegroundColor Cyan
        } Finally {
            # If deployment failed, attempt rollback
            if ($deploymentFailed) {
                Write-Host "`n========================================" -ForegroundColor Red
                Write-Host "DEPLOYMENT FAILED - Starting Rollback..." -ForegroundColor Red
                Write-Host "========================================" -ForegroundColor Red
                
                $backupZipPath = $env:BACKUP_ZIP_PATH
                if ($backupZipPath -and (Test-Path $backupZipPath)) {
                    Try {
                        Write-Host "Restoring from backup: $backupZipPath" -ForegroundColor Yellow
                        
                        # Extract zip to temp location first
                        $tempRestorePath = "$env:TEMP\RestoreBackup_$(Get-Date -Format 'yyyyMMdd_HHmmss')"
                        Write-Host "Extracting backup..." -ForegroundColor Yellow
                        Expand-Archive -Path $backupZipPath -DestinationPath $tempRestorePath -Force -ErrorAction Stop
                        
                        # Delete everything in deployment folder
                        if (Test-Path $DeployPath) {
                            Write-Host "Clearing deployment folder..." -ForegroundColor Yellow
                            Remove-Item -Path "$DeployPath\*" -Recurse -Force -ErrorAction Stop
                        }
                        
                        # Copy extracted files back to deployment
                        Write-Host "Restoring files..." -ForegroundColor Yellow
                        $rollbackArgs = @($tempRestorePath, $DeployPath, "/MIR", "/R:3", "/W:5", "/NFL", "/NDL", "/NP")
                        robocopy @rollbackArgs
                        $rollbackRc = $LASTEXITCODE
                        
                        # Clean up temp folder
                        if (Test-Path $tempRestorePath) {
                            Remove-Item -Path $tempRestorePath -Recurse -Force -ErrorAction SilentlyContinue
                        }
                        
                        if ($rollbackRc -le 7) {
                            Write-Host "Rollback completed successfully!" -ForegroundColor Green
                            Write-Host "Application restored to previous version (100% from backup)." -ForegroundColor Green
                        } else {
                            throw "Robocopy rollback failed with exit code: $rollbackRc"
                        }
                    } Catch {
                        Write-Error "Rollback failed: $_"
                        Write-Error "Manual intervention required. Backup location: $backupZipPath"
                    }
                } else {
                    Write-Warning "No backup available for rollback."
                    Write-Warning "Manual intervention required."
                }
                Write-Host "========================================`n" -ForegroundColor Red
            }
            
            # Always try to start the app pool
            Write-Host "Attempting to start App Pool: $AppPool" -ForegroundColor Cyan
            Try {
                Start-WebAppPool -Name $AppPool -ErrorAction Stop
                Write-Host "App Pool '$AppPool' started successfully." -ForegroundColor Green
            } Catch {
                Write-Warning "App Pool '$AppPool' could not be started: $_"
                Write-Warning "Please check IIS Manager manually."
            }
            
            if ($deploymentFailed) {
                Write-Error "Deployment failed with robocopy exit code $rc. See log: $logFile"
                exit $rc
            } else {
                Write-Host "Deployment completed successfully" -ForegroundColor Green
                exit 0
            }
        }
