name: "Backup IIS Deployment"
description: "Create a compressed backup of IIS deployment with VSS support"

inputs:
  deploy_path:
    description: "IIS deployment path to backup"
    required: true

outputs:
  backup_path:
    description: "Path to the backup ZIP file"
    value: ${{ steps.backup.outputs.backup_path }}

runs:
  using: "composite"
  steps:
    - name: Create backup
      id: backup
      shell: powershell
      env:
        DEPLOY_PATH: ${{ inputs.deploy_path }}
      run: |
        $AppPool = $env:APP_POOL
        $DeployPath = $env:DEPLOY_PATH
        $timestamp = Get-Date -Format "yyyyMMdd_HHmmss"

        # Extract project name from deploy path and sanitize
        $projectNameOriginal = Split-Path -Path $DeployPath -Leaf
        $projectName = $projectNameOriginal -replace " ", "_"

        Write-Host "========================================" -ForegroundColor Cyan
        Write-Host "IIS Backup Utility" -ForegroundColor Cyan
        Write-Host "========================================" -ForegroundColor Cyan
        Write-Host "Project: $projectNameOriginal -> $projectName" -ForegroundColor Yellow
        Write-Host "Deploy Path: $DeployPath" -ForegroundColor Gray
        Write-Host ""

        # Backup location is automatically determined from deploy path
        $BackupDir = "C:/BackupDeployment/$projectName"
        $BackupPath = "$BackupDir/Backup-$timestamp"
        $BackupZip = "$BackupPath.zip"

        # Create backup directory
        if (-not (Test-Path $BackupDir)) {
            New-Item -Path $BackupDir -ItemType Directory -Force | Out-Null
        }

        if (Test-Path $DeployPath) {
            Try {
                Write-Host ""
                Write-Host "========================================" -ForegroundColor Cyan
                Write-Host "Step 1: Copying files with Robocopy (VSS enabled)..." -ForegroundColor Yellow
                
                # Robocopy with VSS support - no downtime needed
                # /MIR = Mirror directory, /B = Backup mode (VSS), /R:3 = Retry 3 times
                # /W:5 = Wait 5 seconds, /NFL /NDL = No file/dir list, /NP = No progress
                # /XD = Exclude directories: Logs, Temp, Backup, App_Data\Temp
                $robocopyArgs = @(
                    $DeployPath, $BackupPath,
                    "/MIR",
                    "/B",
                    "/R:3",
                    "/W:5",
                    "/NFL", "/NDL",
                    "/NP",
                    "/XD", "Logs", "Temp", "Backup", "App_Data\Temp"
                )
                
                robocopy @robocopyArgs
                $rc = $env:LASTEXITCODE

                if ($rc -le 7) {
                    Write-Host "Success: Backup folder created" -ForegroundColor Green
                    Write-Host ""
                    Write-Host "Step 2: Compressing to ZIP..." -ForegroundColor Yellow
                    Compress-Archive -LiteralPath $BackupPath -DestinationPath $BackupZip -Force -ErrorAction Stop

                    if (Test-Path -LiteralPath $BackupZip) {
                        $zipSize = (Get-Item $BackupZip).Length / 1MB
                        Write-Host "Success: Compressed $([math]::Round($zipSize, 2)) MB" -ForegroundColor Green
                        
                        # Remove uncompressed folder
                        Remove-Item -LiteralPath $BackupPath -Recurse -Force -ErrorAction SilentlyContinue
                    } else {
                        throw "Failed to create ZIP file"
                    }

                    # Clean old backups (keep last 5)
                    $oldBackups = Get-ChildItem -Path $BackupDir -Filter "Backup-*.zip" -ErrorAction SilentlyContinue |
                                  Sort-Object LastWriteTime -Descending | Select-Object -Skip 5
                    if ($oldBackups) {
                        Write-Host ""
                        Write-Host "Cleaning old backups (keeping latest 5)..." -ForegroundColor Yellow
                        $oldBackups | ForEach-Object {
                            Remove-Item $_.FullName -Force -ErrorAction SilentlyContinue
                            Write-Host "  Removed: $($_.Name)" -ForegroundColor Gray
                        }
                    }

                    # Set output
                    Write-Output "BACKUP_PATH=$BackupZip" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

                    Write-Host ""
                    Write-Host "========================================" -ForegroundColor Cyan
                    Write-Host "Backup completed successfully!" -ForegroundColor Green
                    Write-Host "Location: $BackupZip" -ForegroundColor Cyan
                    Write-Host "========================================" -ForegroundColor Cyan
                } else {
                    throw "Robocopy failed with exit code: $rc"
                }
            } Catch {
                Write-Host ""
                Write-Host "========================================" -ForegroundColor Red
                Write-Error "CRITICAL: Backup failed: $_"
                Write-Host "========================================" -ForegroundColor Red
                exit 1
            }
        } else {
            Write-Host ""
            Write-Host "No existing deployment found at: $DeployPath" -ForegroundColor Yellow
            Write-Host "This appears to be a first-time deployment. Skipping backup." -ForegroundColor Yellow
            Write-Host "========================================" -ForegroundColor Cyan
        }

        exit 0
